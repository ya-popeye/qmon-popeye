common.popeye.pipeline{
  kafka {
    producer {
      config=["kafka-producer.properties"]
      max-queued = 150000
      high-watermark = 2000000
      low-watermark = 10000
      tick = 500ms
      workers = 3
      dispatcher = popeye.dispatchers.pinned
    }
    consumer {
      config=["kafka-consumer.properties"]
      batch-size = 25000
      tick = 500ms
      backoff = 5000ms
      write-timeout = 60s
      max-lag = 300s
      timeout = 10s
      workers = 1
      max-parallel-senders = 4
      dispatcher = popeye.dispatchers.pinned
    }
  }

  hbase-sink {
    type = hbase-sink
    read-chunk-size = 10
    pool.max = 25
    dispatcher = "/hbase-writer"
    storage = hbaseStorage
  }

  telnet {
    type = telnet
    listen = "0.0.0.0"
    port = 4444
    batchSize = 5000
    high-watermark = 100
    low-watermark = 10
    produce.timeout = 30s
  }
}

popeye.storages {

  hbaseStorage = {
    table {
      points = "popeye:tsdb"
      uids = "popeye:tsdb-uid"
    }

    shard-attributes = ["cluster"]

    generations = [
      {
        // date format: dd/MM/yy
        start-date = "16/06/14"
        rotation-period-hours = 168 // 24 * 7
      },
      {
        start-date = "01/09/14"
        rotation-period-hours = 24
      }
    ]

    uids {
      resolve-timeout = 10s
      cache { initial-capacity = 1000, max-capacity = 100000 }
    }
  }
}

popeye {
  dispatchers {
    pinned {
      type = "PinnedDispatcher"
      executor = "thread-pool-executor"
      thread-pool-executor.allow-core-pool-timeout = off
    }
  }
}

popeye.query = {
  db = {
    pool.max = 25
    read-chunk-size = 10
    storage = hbaseStorage
  }

  server = {
    http.backlog = 100
  }
}

generator {
  datacenter = 0
}

akka {
  actor.deployment {
    /kafka-producer {
      router = round-robin
      nr-of-instances = 4
    }

    /hbase-writer {
      router = round-robin
      nr-of-instances = 1
    }
  }

  io.tcp {
    nr-of-selectors = 1
    received-message-size-limit = 64000
    max-channels = 30000
    batch-accept-limit = 500
  }

  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
}

metrics.csv {
  enabled = false
  period = 5s
  directory = ./metrics
}

monitoring {
  address = "localhost:6666"
}

spray.can.server {
  idle-timeout = 10 s
  request-timeout = 5 s
  #request-chunk-aggregation-limit = 0
  parsing.illegal-header-warnings = off
}

